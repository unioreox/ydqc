// vite.config.ts
import { fileURLToPath, URL } from "node:url";
import { defineConfig } from "file:///E:/csu-dynamic-youth/node_modules/.pnpm/vite@5.4.16_@types+node@20.17.29_less@4.2.2/node_modules/vite/dist/node/index.js";
import vue from "file:///E:/csu-dynamic-youth/node_modules/.pnpm/@vitejs+plugin-vue@5.2.3_vite@5.4.16_@types+node@20.17.29_less@4.2.2__vue@3.5.13_typescript@5.4.5_/node_modules/@vitejs/plugin-vue/dist/index.mjs";
import VueDevTools from "file:///E:/csu-dynamic-youth/node_modules/.pnpm/vite-plugin-vue-devtools@7.7.2_rollup@4.38.0_vite@5.4.16_@types+node@20.17.29_less@4.2.2__vue@3.5.13_typescript@5.4.5_/node_modules/vite-plugin-vue-devtools/dist/vite.mjs";
import { resolve, join } from "path";
import { writeFileSync, mkdirSync } from "fs";
import { execSync } from "child_process";
var __vite_injected_original_import_meta_url = "file:///E:/csu-dynamic-youth/vite.config.ts";
function getCustomInfo() {
  const announcement = {
    switch: true,
    info: "\u3010\u516C\u544A\u3011\u8D77\u70B9\u6253\u5361\u524D\u8BF7\u70B9\u51FB\u53F3\u4E0A\u89D2 \xB7\xB7\xB7 \u5F3A\u5236\u5237\u65B0\u4E00\u6B21, \u540E\u7EED\u65E0\u9700\u518D\u8FDB\u884C\u5237\u65B0"
  };
  const updateInfo = {
    switch: true,
    header: "\u66F4\u65B0\u63D0\u793A",
    body: "\u670D\u52A1\u5668\u70ED\u66F4\u65B0, \u70B9\u51FB\u5237\u65B0\n\u5EFA\u8BAE\u60A8\u66F4\u65B0, \u9632\u6B62\u51FA\u73B0\u6253\u5361\u6570\u636E\u5F02\u5E38"
  };
  const weather = {
    switch: {
      info: true,
      warn: true
    },
    config: {
      api: "https://ydqc.csu.edu.cn/weather",
      province: "\u6E56\u5357",
      city: "\u957F\u6C99"
    },
    info: {
      title: {
        apply: "\u4E2D\u592E\u6C14\u8C61\u53F0\u53D1\u5E03\u5929\u6C14\u9884\u8B66",
        cancel: "\u5929\u6C14\u9884\u8B66\u89E3\u9664"
      },
      body: {
        apply: "\u8BF7\u4ED4\u7EC6\u8BC4\u4F30\u5929\u6C14\u60C5\u51B5\uFF0C\u53CA\u65F6\u8FD4\u56DE\u5230\u5B89\u5168\u5730\u5E26\u3002\n\u5982\u9047\u7D27\u6025\u60C5\u51B5\uFF0C\u8BF7\u53CA\u65F6\u62E8\u6253\u7D27\u6025\u7535\u8BDD\uFF01",
        cancel: "\u7EE7\u7EED\u5F81\u670D\u5CB3\u9E93\u5C71\u5427\uFF01"
      }
    }
  };
  return { announcement, updateInfo, weather };
}
function getGitCommitInfo() {
  try {
    const commitId = execSync("git rev-parse --short HEAD").toString().trim();
    const commitMessage = execSync("git log -1 --pretty=%s").toString().trim();
    const branchName = execSync("git rev-parse --abbrev-ref HEAD").toString().trim();
    const fileStats = execSync("git diff --shortstat HEAD~1").toString().trim();
    const tagInfo = execSync("git describe --tags --always").toString().trim().toString().trim().split("\n");
    const commitInfo = {
      commitId,
      commitMessage,
      branchName,
      fileStats,
      tagInfo
    };
    return { commitInfo };
  } catch (error) {
    console.warn("\u65E0\u6CD5\u83B7\u53D6 Git \u63D0\u4EA4\u4FE1\u606F");
    return {};
  }
}
function buildInfoPlugin() {
  let outDir = "";
  let root = "";
  return {
    name: "build-info",
    configResolved(config) {
      root = config.root;
      outDir = resolve(root, config.build.outDir);
    },
    closeBundle() {
      const { announcement, updateInfo, weather } = getCustomInfo();
      const buildTime = (/* @__PURE__ */ new Date()).toISOString();
      const { commitInfo } = getGitCommitInfo();
      const buildInfo = {
        time: buildTime,
        commitInfo,
        announcement,
        updateInfo,
        weather
      };
      mkdirSync(outDir, { recursive: true });
      const outputPath = join(outDir, "build-info.json");
      writeFileSync(outputPath, JSON.stringify(buildInfo, null, 2));
      console.log("\u6784\u5EFA\u4FE1\u606F\u5DF2\u5199\u5165:", outputPath);
      console.log(buildInfo);
    }
  };
}
var vite_config_default = defineConfig({
  plugins: [
    vue(),
    VueDevTools(),
    buildInfoPlugin()
  ],
  resolve: {
    alias: {
      "@": fileURLToPath(new URL("./src", __vite_injected_original_import_meta_url))
    }
  },
  server: {
    host: "0.0.0.0",
    proxy: {
      "/api": {
        // debug-bridge 配置对应端口
        target: "http://localhost:8080",
        changeOrigin: true,
        rewrite: (path) => path.replace("/api/v1", "")
      },
      "/uploads": {
        // debug-bridge 配置对应端口
        target: "http://localhost:8080",
        changeOrigin: true
      }
    }
  }
});
export {
  vite_config_default as default
};
//# sourceMappingURL=data:application/json;base64,
