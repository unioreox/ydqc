// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-axios';
import type { LeaveTeamData, LeaveTeamResponse, StopTeamData, StopTeamResponse, DeleteActivityData, DeleteActivityResponse, GetActivityByIdData, GetActivityByIdResponse, UpdateActivityData, UpdateActivityResponse, UpdateApiData, UpdateApiResponse, LoginApiData, LoginApiResponse, HandleFileUploadData, HandleFileUploadResponse, GetMyTeamPreviewData, GetMyTeamPreviewResponse, CreateTeamRequestData, CreateTeamRequestResponse, JoinTeamData, JoinTeamResponse, ListRecordData, ListRecordResponse, DoCheckinData, DoCheckinResponse, ManualAddRecordData, ManualAddRecordResponse, GetUserFeedbackData, GetUserFeedbackResponse, AddFeedbackData, AddFeedbackResponse, UpdatePasswdData, UpdatePasswdResponse, RefreshTokenData, RefreshTokenResponse, LoginApi1Data, LoginApi1Response, GetAllActivitiesData, GetAllActivitiesResponse, CreateActivityData, CreateActivityResponse, CancelApplyActivityData, CancelApplyActivityResponse, ApplyActivityData, ApplyActivityResponse, GetWxConfigData, GetWxConfigResponse, InfoApiData, InfoApiResponse, ExportAllUsersToExcelApiData, ExportAllUsersToExcelApiResponse, ListAllUserData, ListAllUserResponse, GetTeamInfoData, GetTeamInfoResponse, StreamTeamUpdatesData, StreamTeamUpdatesResponse, ListTodayValidRecordApiData, ListTodayValidRecordApiResponse, ListTodayValidRecordExcelApiData, ListTodayValidRecordExcelApiResponse, GetLuckyGuyData, GetLuckyGuyResponse, DoLuckDrawData, DoLuckDrawResponse, GetLastRecordData, GetLastRecordResponse, ListRecordByTimeData, ListRecordByTimeResponse, ListRecordByTime1Data, ListRecordByTime1Response, ListAllRecordApiData, ListAllRecordApiResponse, ListAllValidRecordApiData, ListAllValidRecordApiResponse, ListAllValidRecordApi1Data, ListAllValidRecordApi1Response, GetUserCountLeaderBoardData, GetUserCountLeaderBoardResponse, GetTop30UsersByBestScoreData, GetTop30UsersByBestScoreResponse, GetCollegeLeaderBoardData, GetCollegeLeaderBoardResponse, GetHistoryData, GetHistoryResponse, GetFeedbackData, GetFeedbackResponse, ListCollegeApiData, ListCollegeApiResponse, ListCheckPointData, ListCheckPointResponse, GetCertificateByUserIdApiData, GetCertificateByUserIdApiResponse, GetCertificateByIdApiData, GetCertificateByIdApiResponse, GetAsyncRoutesData, GetAsyncRoutesResponse, GetActivityRecordsData, GetActivityRecordsResponse, DeleteTeamData, DeleteTeamResponse, CancelCheckinData, CancelCheckinResponse } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const leaveTeam = <ThrowOnError extends boolean = false>(options: Options<LeaveTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<LeaveTeamResponse, unknown, ThrowOnError>({
        url: '/team/leave',
        ...options
    });
};

export const stopTeam = <ThrowOnError extends boolean = false>(options?: Options<StopTeamData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).put<StopTeamResponse, unknown, ThrowOnError>({
        url: '/team/current/stop',
        ...options
    });
};

export const deleteActivity = <ThrowOnError extends boolean = false>(options: Options<DeleteActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteActivityResponse, unknown, ThrowOnError>({
        url: '/activities/{id}',
        ...options
    });
};

export const getActivityById = <ThrowOnError extends boolean = false>(options: Options<GetActivityByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActivityByIdResponse, unknown, ThrowOnError>({
        url: '/activities/{id}',
        ...options
    });
};

export const updateActivity = <ThrowOnError extends boolean = false>(options: Options<UpdateActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).put<UpdateActivityResponse, unknown, ThrowOnError>({
        url: '/activities/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const updateApi = <ThrowOnError extends boolean = false>(options: Options<UpdateApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateApiResponse, unknown, ThrowOnError>({
        url: '/user/update',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const loginApi = <ThrowOnError extends boolean = false>(options: Options<LoginApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginApiResponse, unknown, ThrowOnError>({
        url: '/user/login',
        ...options
    });
};

export const handleFileUpload = <ThrowOnError extends boolean = false>(options?: Options<HandleFileUploadData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<HandleFileUploadResponse, unknown, ThrowOnError>({
        url: '/upload',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const getMyTeamPreview = <ThrowOnError extends boolean = false>(options?: Options<GetMyTeamPreviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMyTeamPreviewResponse, unknown, ThrowOnError>({
        url: '/team',
        ...options
    });
};

export const createTeamRequest = <ThrowOnError extends boolean = false>(options: Options<CreateTeamRequestData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateTeamRequestResponse, unknown, ThrowOnError>({
        url: '/team',
        ...options
    });
};

export const joinTeam = <ThrowOnError extends boolean = false>(options: Options<JoinTeamData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<JoinTeamResponse, unknown, ThrowOnError>({
        url: '/team/join',
        ...options
    });
};

export const listRecord = <ThrowOnError extends boolean = false>(options?: Options<ListRecordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListRecordResponse, unknown, ThrowOnError>({
        url: '/record',
        ...options
    });
};

export const doCheckin = <ThrowOnError extends boolean = false>(options: Options<DoCheckinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<DoCheckinResponse, unknown, ThrowOnError>({
        url: '/record',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const manualAddRecord = <ThrowOnError extends boolean = false>(options: Options<ManualAddRecordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ManualAddRecordResponse, unknown, ThrowOnError>({
        url: '/record/manual',
        ...options
    });
};

export const getUserFeedback = <ThrowOnError extends boolean = false>(options?: Options<GetUserFeedbackData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserFeedbackResponse, unknown, ThrowOnError>({
        url: '/feedback',
        ...options
    });
};

export const addFeedback = <ThrowOnError extends boolean = false>(options: Options<AddFeedbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AddFeedbackResponse, unknown, ThrowOnError>({
        url: '/feedback',
        ...options
    });
};

export const updatePasswd = <ThrowOnError extends boolean = false>(options: Options<UpdatePasswdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdatePasswdResponse, unknown, ThrowOnError>({
        url: '/admin/update-passwd',
        ...options
    });
};

export const refreshToken = <ThrowOnError extends boolean = false>(options: Options<RefreshTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RefreshTokenResponse, unknown, ThrowOnError>({
        url: '/admin/refresh-token',
        ...options
    });
};

export const loginApi1 = <ThrowOnError extends boolean = false>(options: Options<LoginApi1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginApi1Response, unknown, ThrowOnError>({
        url: '/admin/login',
        ...options
    });
};

export const getAllActivities = <ThrowOnError extends boolean = false>(options?: Options<GetAllActivitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAllActivitiesResponse, unknown, ThrowOnError>({
        url: '/activities',
        ...options
    });
};

export const createActivity = <ThrowOnError extends boolean = false>(options: Options<CreateActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateActivityResponse, unknown, ThrowOnError>({
        url: '/activities',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const cancelApplyActivity = <ThrowOnError extends boolean = false>(options: Options<CancelApplyActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelApplyActivityResponse, unknown, ThrowOnError>({
        url: '/activities/apply',
        ...options
    });
};

export const applyActivity = <ThrowOnError extends boolean = false>(options: Options<ApplyActivityData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ApplyActivityResponse, unknown, ThrowOnError>({
        url: '/activities/apply',
        ...options
    });
};

export const getWxConfig = <ThrowOnError extends boolean = false>(options: Options<GetWxConfigData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetWxConfigResponse, unknown, ThrowOnError>({
        url: '/wx/config',
        ...options
    });
};

export const infoApi = <ThrowOnError extends boolean = false>(options?: Options<InfoApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<InfoApiResponse, unknown, ThrowOnError>({
        url: '/user/info',
        ...options
    });
};

export const exportAllUsersToExcelApi = <ThrowOnError extends boolean = false>(options?: Options<ExportAllUsersToExcelApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ExportAllUsersToExcelApiResponse, unknown, ThrowOnError>({
        url: '/user/exportAllUsers',
        ...options
    });
};

export const listAllUser = <ThrowOnError extends boolean = false>(options: Options<ListAllUserData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAllUserResponse, unknown, ThrowOnError>({
        url: '/user/all',
        ...options
    });
};

export const getTeamInfo = <ThrowOnError extends boolean = false>(options: Options<GetTeamInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetTeamInfoResponse, unknown, ThrowOnError>({
        url: '/team/{teamId}',
        ...options
    });
};

export const streamTeamUpdates = <ThrowOnError extends boolean = false>(options: Options<StreamTeamUpdatesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<StreamTeamUpdatesResponse, unknown, ThrowOnError>({
        responseType: 'text',
        url: '/team/stream/{id}',
        ...options
    });
};

export const listTodayValidRecordApi = <ThrowOnError extends boolean = false>(options: Options<ListTodayValidRecordApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListTodayValidRecordApiResponse, unknown, ThrowOnError>({
        url: '/record/today',
        ...options
    });
};

export const listTodayValidRecordExcelApi = <ThrowOnError extends boolean = false>(options?: Options<ListTodayValidRecordExcelApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListTodayValidRecordExcelApiResponse, unknown, ThrowOnError>({
        url: '/record/today/excel',
        ...options
    });
};

export const getLuckyGuy = <ThrowOnError extends boolean = false>(options?: Options<GetLuckyGuyData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLuckyGuyResponse, unknown, ThrowOnError>({
        url: '/record/lucky',
        ...options
    });
};

export const doLuckDraw = <ThrowOnError extends boolean = false>(options: Options<DoLuckDrawData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<DoLuckDrawResponse, unknown, ThrowOnError>({
        url: '/record/luckDraw',
        ...options
    });
};

export const getLastRecord = <ThrowOnError extends boolean = false>(options?: Options<GetLastRecordData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLastRecordResponse, unknown, ThrowOnError>({
        url: '/record/last',
        ...options
    });
};

export const listRecordByTime = <ThrowOnError extends boolean = false>(options: Options<ListRecordByTimeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRecordByTimeResponse, unknown, ThrowOnError>({
        url: '/record/byTime',
        ...options
    });
};

export const listRecordByTime1 = <ThrowOnError extends boolean = false>(options: Options<ListRecordByTime1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListRecordByTime1Response, unknown, ThrowOnError>({
        url: '/record/byTime/excel',
        ...options
    });
};

export const listAllRecordApi = <ThrowOnError extends boolean = false>(options: Options<ListAllRecordApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAllRecordApiResponse, unknown, ThrowOnError>({
        url: '/record/all',
        ...options
    });
};

export const listAllValidRecordApi = <ThrowOnError extends boolean = false>(options: Options<ListAllValidRecordApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<ListAllValidRecordApiResponse, unknown, ThrowOnError>({
        url: '/record/all/valid',
        ...options
    });
};

export const listAllValidRecordApi1 = <ThrowOnError extends boolean = false>(options?: Options<ListAllValidRecordApi1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListAllValidRecordApi1Response, unknown, ThrowOnError>({
        url: '/record/all/excel',
        ...options
    });
};

export const getUserCountLeaderBoard = <ThrowOnError extends boolean = false>(options?: Options<GetUserCountLeaderBoardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserCountLeaderBoardResponse, unknown, ThrowOnError>({
        url: '/leaderboard/userCount',
        ...options
    });
};

export const getTop30UsersByBestScore = <ThrowOnError extends boolean = false>(options?: Options<GetTop30UsersByBestScoreData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTop30UsersByBestScoreResponse, unknown, ThrowOnError>({
        url: '/leaderboard/top30',
        ...options
    });
};

export const getCollegeLeaderBoard = <ThrowOnError extends boolean = false>(options?: Options<GetCollegeLeaderBoardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCollegeLeaderBoardResponse, unknown, ThrowOnError>({
        url: '/leaderboard/college',
        ...options
    });
};

export const getHistory = <ThrowOnError extends boolean = false>(options?: Options<GetHistoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetHistoryResponse, unknown, ThrowOnError>({
        url: '/history',
        ...options
    });
};

export const getFeedback = <ThrowOnError extends boolean = false>(options: Options<GetFeedbackData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFeedbackResponse, unknown, ThrowOnError>({
        url: '/feedback/all',
        ...options
    });
};

export const listCollegeApi = <ThrowOnError extends boolean = false>(options?: Options<ListCollegeApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCollegeApiResponse, unknown, ThrowOnError>({
        url: '/college',
        ...options
    });
};

export const listCheckPoint = <ThrowOnError extends boolean = false>(options?: Options<ListCheckPointData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<ListCheckPointResponse, unknown, ThrowOnError>({
        url: '/checkPoint',
        ...options
    });
};

export const getCertificateByUserIdApi = <ThrowOnError extends boolean = false>(options?: Options<GetCertificateByUserIdApiData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCertificateByUserIdApiResponse, unknown, ThrowOnError>({
        url: '/certificate',
        ...options
    });
};

export const getCertificateByIdApi = <ThrowOnError extends boolean = false>(options: Options<GetCertificateByIdApiData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetCertificateByIdApiResponse, unknown, ThrowOnError>({
        url: '/certificate/{id}',
        ...options
    });
};

export const getAsyncRoutes = <ThrowOnError extends boolean = false>(options?: Options<GetAsyncRoutesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAsyncRoutesResponse, unknown, ThrowOnError>({
        url: '/admin/get-async-routes',
        ...options
    });
};

export const getActivityRecords = <ThrowOnError extends boolean = false>(options: Options<GetActivityRecordsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetActivityRecordsResponse, unknown, ThrowOnError>({
        url: '/activities/{id}/records',
        ...options
    });
};

export const deleteTeam = <ThrowOnError extends boolean = false>(options?: Options<DeleteTeamData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).delete<DeleteTeamResponse, unknown, ThrowOnError>({
        url: '/team/current/cancel',
        ...options
    });
};

export const cancelCheckin = <ThrowOnError extends boolean = false>(options: Options<CancelCheckinData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<CancelCheckinResponse, unknown, ThrowOnError>({
        url: '/record/{recordId}',
        ...options
    });
};