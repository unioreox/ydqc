// This file is auto-generated by @hey-api/openapi-ts

import { createClient, createConfig, type Options } from '@hey-api/client-axios';
import type { UpdateApiData, UpdateApiError, UpdateApiResponse, LoginApiData, LoginApiError, LoginApiResponse, ListRecordError, ListRecordResponse, DoCheckinData, DoCheckinError, DoCheckinResponse, GetWxConfigData, GetWxConfigError, GetWxConfigResponse, InfoApiError, InfoApiResponse, GetLastRecordError, GetLastRecordResponse, ListAllRecordError, ListAllRecordResponse, GetUserCountLeaderBoardError, GetUserCountLeaderBoardResponse, GetTop30UsersByBestScoreError, GetTop30UsersByBestScoreResponse, GetCollegeLeaderBoardError, GetCollegeLeaderBoardResponse, ListCollegeApiError, ListCollegeApiResponse, ListCheckPointError, ListCheckPointResponse } from './types.gen';

export const client = createClient(createConfig());

export const updateApi = <ThrowOnError extends boolean = false>(options: Options<UpdateApiData, ThrowOnError>) => { return (options?.client ?? client).post<UpdateApiResponse, UpdateApiError, ThrowOnError>({
    ...options,
    url: '/user/update'
}); };

export const loginApi = <ThrowOnError extends boolean = false>(options: Options<LoginApiData, ThrowOnError>) => { return (options?.client ?? client).post<LoginApiResponse, LoginApiError, ThrowOnError>({
    ...options,
    url: '/user/login'
}); };

export const listRecord = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListRecordResponse, ListRecordError, ThrowOnError>({
    ...options,
    url: '/record'
}); };

export const doCheckin = <ThrowOnError extends boolean = false>(options: Options<DoCheckinData, ThrowOnError>) => { return (options?.client ?? client).post<DoCheckinResponse, DoCheckinError, ThrowOnError>({
    ...options,
    url: '/record'
}); };

export const getWxConfig = <ThrowOnError extends boolean = false>(options: Options<GetWxConfigData, ThrowOnError>) => { return (options?.client ?? client).get<GetWxConfigResponse, GetWxConfigError, ThrowOnError>({
    ...options,
    url: '/wx/config'
}); };

export const infoApi = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<InfoApiResponse, InfoApiError, ThrowOnError>({
    ...options,
    url: '/user/info'
}); };

export const getLastRecord = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetLastRecordResponse, GetLastRecordError, ThrowOnError>({
    ...options,
    url: '/record/last'
}); };

export const listAllRecord = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListAllRecordResponse, ListAllRecordError, ThrowOnError>({
    ...options,
    url: '/record/all'
}); };

export const getUserCountLeaderBoard = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetUserCountLeaderBoardResponse, GetUserCountLeaderBoardError, ThrowOnError>({
    ...options,
    url: '/leaderboard/userCount'
}); };

export const getTop30UsersByBestScore = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetTop30UsersByBestScoreResponse, GetTop30UsersByBestScoreError, ThrowOnError>({
    ...options,
    url: '/leaderboard/top30'
}); };

export const getCollegeLeaderBoard = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<GetCollegeLeaderBoardResponse, GetCollegeLeaderBoardError, ThrowOnError>({
    ...options,
    url: '/leaderboard/college'
}); };

export const listCollegeApi = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListCollegeApiResponse, ListCollegeApiError, ThrowOnError>({
    ...options,
    url: '/college'
}); };

export const listCheckPoint = <ThrowOnError extends boolean = false>(options?: Options<unknown, ThrowOnError>) => { return (options?.client ?? client).get<ListCheckPointResponse, ListCheckPointError, ThrowOnError>({
    ...options,
    url: '/checkPoint'
}); };